1.Program a multi-threaded producer and consumer with locks on concurrent access to a memory location using C/C++/Golang.
Explanation:
Have a global list / array where two or more producers append randomly generated numbers concurrently. A consumer thread must dequeue from the global list and print it!

Code:

#include <iostream>
#include <thread>
#include <vector>
#include <list>
#include <mutex>
#include <random>

std::list<int> globalList;
std::mutex mtx;

void producer() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(1, 100);

    for (int i = 0; i < 5; ++i) {
        int num = dis(gen);
        {
            std::lock_guard<std::mutex> lock(mtx);
            globalList.push_back(num);
            std::cout << "Produced: " << num << std::endl;
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(dis(gen)));
    }
}

void consumer() {
    for (int i = 0; i < 5; ++i) {
        int num;
        {
            std::lock_guard<std::mutex> lock(mtx);
            if (!globalList.empty()) {
                num = globalList.front();
                globalList.pop_front();
                std::cout << "Consumed: " << num << std::endl;
            }
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
}

int main() {
    std::thread producerThread(producer);
    std::thread consumerThread(consumer);

    producerThread.join();
    consumerThread.join();

    return 0;
}

