4. Find and fix the bug in the following code. Write down the explanation about the bug and fix the code.

#include <stdio.h>
#include <stdlib.h> 
#include <pthread.h> 
#include <semaphore.h>
#define BUFFER_SIZE 10
typedef struct node {
int data;
struct node *next;
} Node;

Node *head = NULL, *tail = NULL; int count = 0;

sem_t full, empty; pthread_mutex_t lock;

void add_data(int data) {
Node *new_node = (Node*)malloc(sizeof(Node)); new_node->data = data;
new_node->next = NULL; if(tail == NULL) {
head = tail = new_node;
} else {
tail->next = new_node; tail = new_node;
}
count++;
}
 
int remove_data() { Node *temp = head;
int data = temp->data; head = head->next; count--;
return data;
}

void *producer(void *arg) { int i, data;
for(i=0; i<100; i++) { data = rand() % 100; sem_wait(&empty);
pthread_mutex_lock(&lock); add_data(data); printf("Produced: %d\n", data); pthread_mutex_unlock(&lock); sem_post(&full);
}
}

void *consumer(void *arg) { int i, data;
for(i=0; i<100; i++) { sem_wait(&full); pthread_mutex_lock(&lock); data = remove_data();
printf("Consumed: %d\n", data); pthread_mutex_unlock(&lock); sem_post(&empty);
}
}

int main() {
pthread_t producer_thread, consumer_thread; sem_init(&full, 0, 0);
sem_init(&empty, 0, BUFFER_SIZE); pthread_mutex_init(&lock, NULL); pthread_create(&producer_thread, NULL, producer, NULL); pthread_create(&consumer_thread, NULL, consumer, NULL); pthread_join(producer_thread, NULL); pthread_join(consumer_thread, NULL);
return 0;
}

Solution:

I have done two changes in the code to fix the bug:
1)In the remove_data function, after removing a node from the linked list, we need to free the memory occupied by that node using the free function.
  This ensures that the memory is properly deallocated and prevents memory leaks.

Freeing Removed Nodes:

int remove_data() {
    Node *temp = head;
    int data = temp->data;
    head = head->next;
    free(temp);
    count--;
    return data;
}

2)Before allocating memory for a new node, we need to add a check to ensure that the memory allocation is successful.
If malloc returns NULL, it means memory allocation failed.
In such cases,we need to print an error message using perror and exit the program with a non-zero status code to indicate failure.
 
Adding Memory Allocation Check:

Node *new_node = (Node*)malloc(sizeof(Node));
if (new_node == NULL) {
    perror("Memory allocation failed");
    exit(1);
}

So the complete Modified Code is as follows:

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 10

typedef struct node {
    int data;
    struct node *next;
} Node;

Node *head = NULL, *tail = NULL;
int count = 0;

sem_t full, empty;
pthread_mutex_t lock;

void add_data(int data) {
    Node *new_node = (Node*)malloc(sizeof(Node));
    if (new_node == NULL) {
        perror("Memory allocation failed");
        exit(1);
    }
    new_node->data = data;
    new_node->next = NULL;

    if (tail == NULL) {
        head = tail = new_node;
    } else {
        tail->next = new_node;
        tail = new_node;
    }
    count++;
}

int remove_data() {
    Node *temp = head;
    int data = temp->data;
    head = head->next;
    free(temp);
    count--;
    return data;
}

void *producer(void *arg) {
    int i, data;
    for (i = 0; i < 100; i++) {
        data = rand() % 100;
        sem_wait(&empty);
        pthread_mutex_lock(&lock);
        add_data(data);
        printf("Produced: %d\n", data);
        pthread_mutex_unlock(&lock);
        sem_post(&full);
    }
}

void *consumer(void *arg) {
    int i, data;
    for (i = 0; i < 100; i++) {
        sem_wait(&full);
        pthread_mutex_lock(&lock);
        data = remove_data();
        printf("Consumed: %d\n", data);
        pthread_mutex_unlock(&lock);
        sem_post(&empty);
    }
}

int main() {
    pthread_t producer_thread, consumer_thread;
    sem_init(&full, 0, 0);
    sem_init(&empty, 0, BUFFER_SIZE);
    pthread_mutex_init(&lock, NULL);

    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    sem_destroy(&full);
    sem_destroy(&empty);
    pthread_mutex_destroy(&lock);

    return 0;
}

